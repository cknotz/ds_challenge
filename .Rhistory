stat_density(alpha = .3,bw=.01, fill = "#c2224a") +
scale_y_continuous(expand = c(0, 0)) +
xlab("Differenz in den Anteilen pos. Bewertungen") +
ylab("Dichte (%)") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(sims, aes(x=scores,fill = anb)) +
geom_histogram(binwidth =.01,alpha=.8, aes(y=..density..), position = "identity") +
scale_fill_manual(values = c("#222d33","#c2224a"),
labels = c("Anbieter A","Anbieter B")) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 101)) +
xlab("Anteil positive Bewertungen") +
ylab("Dichte") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(sims, aes(x=scores,fill = anb)) +
geom_histogram(binwidth =.01,alpha=.8, aes(y=..density..), position = "identity") +
scale_fill_manual(values = c("#222d33","#c2224a"),
labels = c("Anbieter A","Anbieter B")) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 101)) +
xlab("Anteil positive Bewertungen") +
ylab("Dichte (%)") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
table(rbind(c(90,2),c(10,0)))
rbind(c(90,2),c(10,0))
(factorial(90+2)*factorial(10+0)*factorial(90+10)*factorial(2+0))/(factorial(102)*factorial(90)*factorial(2)*factorial(10)*factorial(0))
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
(factorial(90+2)*factorial(10+0)*factorial(90+10)*factorial(2+0))/(factorial(102)*factorial(90)*factorial(2)*factorial(10)*factorial(0))
(factorial(92)*factorial(10)*factorial(100)*factorial(2)) /
(factorial(102)*factorial(89)*factorial(1)*factorial(11)*factorial(1)) # one more extreme
89+1+11+1
(factorial(89+1)*factorial(11+1)*factorial(89+11)*factorial(1+1)) /
(factorial(102)*factorial(89)*factorial(1)*factorial(11)*factorial(1)) # one more extreme
(factorial(90+2)*factorial(10+0)*factorial(90+10)*factorial(2+0)) /
(factorial(102)*factorial(90)*factorial(2)*factorial(10)*factorial(0)) # observed
(factorial(88+2)*factorial(12+2)*factorial(88+12)*factorial(0+2)) /
(factorial(102)*factorial(88)*factorial(0)*factorial(12)*factorial(2)) # one more extreme
(factorial(88+0)*factorial(12+2)*factorial(88+12)*factorial(0+2)) /
(factorial(102)*factorial(88)*factorial(0)*factorial(12)*factorial(2)) # one more extreme
one <- (factorial(90+2)*factorial(10+0)*factorial(90+10)*factorial(2+0)) /
(factorial(102)*factorial(90)*factorial(2)*factorial(10)*factorial(0)) # observed
two <- (factorial(89+1)*factorial(11+1)*factorial(89+11)*factorial(1+1)) /
(factorial(102)*factorial(89)*factorial(1)*factorial(11)*factorial(1)) # one more extreme
three <- (factorial(88+0)*factorial(12+2)*factorial(88+12)*factorial(0+2)) /
(factorial(102)*factorial(88)*factorial(0)*factorial(12)*factorial(2)) # one more extreme
one+two+three
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
fisher.test(rbind(c(90,2),c(10,0)), alternative="greater")
fisher.test(rbind(c(90,2),c(10,0)), alternative="two.sided")
fisher.test(rbind(c(90,2),c(10,0)), alternative="greater")
two+three # two-sided
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
one <- (factorial(90+2)*factorial(10+0)*factorial(90+10)*factorial(2+0)) /
(factorial(102)*factorial(90)*factorial(2)*factorial(10)*factorial(0)) # observed
one # one-sided, other direction?
one+two+three # one sided (direction?)
one, two, three
one
two
three
one # one-sided, other direction?
# Generate data.frame
df <- data.frame(anb = c(replicate(100, "Anbieter A"),replicate(2, "Anbieter B")),
eval = c(c(replicate(90,1),replicate(10,0)),c(1,1)))
table(df$anb,df$eval)
# Storing proportions
sum <- df %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1),
sample_size = n())
phat_A <- sum$positive[1]
phat_B <- sum$positive[2]
n_A <- sum$sample_size[1]
n_B <- sum$sample_size[2]
obs_diff <- phat_A - phat_B
# Shuffling
set.seed(17)
shuffles <- mosaic::do(1000) *
(df %>%
mutate(anb = mosaic::shuffle(anb)) %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1)))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_boxplot()
table(df$anb,df$eval)
null_dist <- shuffles %>%
group_by(.index) %>%
summarize(diff = -diff(positive)) # negative of difference to obtain same sign as diff A-B
sum(round(null_dist$diff,2)<0)/1000
sum(round(null_dist$diff,2)<0)/1000
sum(round(null_dist$diff,2)>0)/1000
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white")
shuffles <- mosaic::do(10000) *
(df %>%
mutate(anb = mosaic::shuffle(anb)) %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1)))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_boxplot()
null_dist <- shuffles %>%
group_by(.index) %>%
summarize(diff = -diff(positive)) # negative of difference to obtain same sign as diff A-B
sum(round(null_dist$diff,2)>0)/10000
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white")
runApp('commasoft_app.R')
sum(round(null_dist$diff,2)>-.10)/1000
sum(round(null_dist$diff,2)>-.10)/10000
sum(round(null_dist$diff,2)<=0)/10000
ggplot(null_dist, aes(x = diff/10000)) +
geom_histogram(color = "white")
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(trans = function(x) x/10000)
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(trans = function(x){x/10000})
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/10000})
?seq()
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/10000}) +
scale_x_continuous(breaks = seq(-0.2,1,.2))
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/10000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1))
one # one-sided, other direction?
two
(90/100)-(2/2)
(89/100)-(1/2)
(88/100)-(0/2)
one # one-sided, other direction?
two+three
fisher.test(rbind(c(90,2),c(10,0)), alternative="greater")
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
two+three
pvalue <- null_dist %>%
filter( (round(diff,2) > obs_diff) ) %>%
nrow() / nrow(null_dist)
pvalue
sum(round(null_dist$diff,2)<=0)/10000
sum(round(null_dist$diff,2)>obs_diff)/10000
sum(round(null_dist$diff,2)>0)/10000
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_boxplot()
fishertabs <- paste(readLines("www/tables.html"), collapse="\n")
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
tab1 <-  paste(readLines("www/tab1.html"), collapse="\n")
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
df <- data.frame(anb = c(replicate(100, "Anbieter A"),replicate(2, "Anbieter B")),
eval = c(c(replicate(90,1),replicate(10,0)),c(1,1)))
table(df$anb,df$eval)
# Storing proportions
sum <- df %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1),
sample_size = n())
phat_A <- sum$positive[1]
phat_B <- sum$positive[2]
n_A <- sum$sample_size[1]
n_B <- sum$sample_size[2]
obs_diff <- phat_A - phat_B
# Shuffling
set.seed(17)
shuffles <- mosaic::do(1000) *
(df %>%
mutate(anb = mosaic::shuffle(anb)) %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1)))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_boxplot()
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter()
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25) +
geom_boxplot(outlier.shape=NA)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25, size = .1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25, size = .5)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25, size = 1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.25, width = 0.25, size = 1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.25, width = 0.25, size = 1, height = 0)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,fill = "#c2224a")
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,color = "#c2224a")
null_dist <- shuffles %>%
group_by(.index) %>%
summarize(diff = -diff(positive)) # negative of difference to obtain same sign as diff A-B
sum(round(null_dist$diff,2)>0)/1000
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,color = "#c2224a")
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,color = "#c2224a") +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2, height = 0,color = "#c2224a") +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
scale_y_continuous(breaks = seq(0,1,.1))
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
scale_y_continuous(breaks = seq(0,1,.1)) +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1))
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "#c2224a", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
sum(round(null_dist$diff,2)>0)/1000
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}, expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-0.2,1,.1), ) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}, expand = c(0, 0), limits = c(0,1)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}, expand = c(0, 0), limits = c(0,1000)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000},
expand = c(0, 0),
limits = c(0,1000),
breaks = seq(0,1000,200)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
library(shiny); runApp('commasoft_app.R')
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
sum(round(null_dist$diff,2)>0)/1000
df <- data.frame(anb = c(replicate(100, "Anbieter A"),replicate(2, "Anbieter B")),
eval = c(c(replicate(90,1),replicate(10,0)),c(1,1)))
table(df$anb,df$eval)
# Storing proportions
sum <- df %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1),
sample_size = n())
phat_A <- sum$positive[1]
phat_B <- sum$positive[2]
n_A <- sum$sample_size[1]
n_B <- sum$sample_size[2]
obs_diff <- phat_A - phat_B
# Shuffling
set.seed(17)
shuffles <- mosaic::do(1000) *
(df %>%
mutate(anb = mosaic::shuffle(anb)) %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1)))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
scale_y_continuous(breaks = seq(0,1,.1)) +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
null_dist <- shuffles %>%
group_by(.index) %>%
summarize(diff = -diff(positive)) # negative of difference to obtain same sign as diff A-B
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000},
expand = c(0, 0),
limits = c(0,1000),
breaks = seq(0,1000,200)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
sum(round(null_dist$diff,2)>0)/1000
sum(round(null_dist$diff,2)<=0)/1000
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
fisher <- fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
