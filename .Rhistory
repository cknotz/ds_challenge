"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#fff7bc","#91bfdb","#ffffbf"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
p <- ggplot(table[1:(3*10),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#fec44f","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
p <- ggplot(table[1:(3*84),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#fec44f","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
p <- ggplot(table[1:(3*84),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#fec44f","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
p <- ggplot(table[1:(3*10),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#fec44f","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
p <- ggplot(table[1:(3*10),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#a6cee3","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
p <- ggplot(table[1:(3*84),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#a6cee3","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
url <- "https://en.wikipedia.org/wiki/2016_Summer_Olympics_medal_table"
xpath <- "/html/body/div[3]/div[3]/div[5]/div[1]/table[2]"
page <- read_html(url)
# Extracting table
alltables <- html_nodes(page, "table")
table <- alltables[[2]] %>%
html_table(fill = T)
# Cleaning
table <- table[which(grepl("Totals", table$NOC)!=TRUE),]
table <- table %>%
separate(NOC,
c("country","c_abbrev"),
sep = -6)
table$c_abbrev <- gsub("[()]|(^\\s+)|(\\s+$)", "",table$c_abbrev)
# Reading links
link <- page %>%
html_nodes(xpath = "//th/a") %>%
html_attr("href")
country <- gsub("/wiki/|_at_the_2016_Summer_Olympics", "", link)
country <- gsub("_", " ", country)
links <- data.frame(country,link)
links <- links[which(grepl("Summer Olympic|Winter Olympic|Independent Olympic Athletes",links$country)!=TRUE),]
links$link <- gsub("/wiki/", "",links$link)
# # Merge
table <- merge(table,links,
by = "country")
rm(alltables,page, url, xpath,country,links,link) # removing clutter
View(table)
# Cleaning & translating country names
table$country_de <- countrycode(table$country,'country.name','country.name.de')
# custom name changes
table$country_de[which(table$country_de=="Korea, Demokratische Volksrepublik")] <- "Nordkorea"
table$country_de[which(table$country_de=="Korea, Republik von")] <- "Südkorea"
table$country_de[which(table$country_de=="Russische Föderation")] <- "Russland"
# Data for graph functions
table$link <- paste0("https://en.wikipedia.org/wiki/",table$link)
table$onclick <- sprintf("window.open(\"%s%s\")","",table$link)
# German links
table$link_de <- paste0("https://de.wikipedia.org/wiki/Olympische_Sommerspiele_2016/Teilnehmer_(",
table$country_de,
")") %>%
gsub(" ","_",.)
table$onclick_de <- sprintf("window.open(\"%s%s\")","",table$link_de)
# adjust medal names
names(table)[names(table)=="Silver"] <- "Silber"
# Reshape for graph
table <- pivot_longer(table,
cols = c("Gold","Silber","Bronze"),
names_to = "medal",
values_to = "count")
# Values for tooltip
tiptab <- pivot_wider(table[,c("country","medal","count")],
id_cols = c("country","medal"),
names_from = "medal",
values_from = "count")
# Merging
table <- merge(table,tiptab,by = "country")
rm(tiptab)
# Factor for graph
table$medfac <- NA
table$medfac[table$medal=="Bronze"] <- 1
table$medfac[table$medal=="Silber"] <- 2
table$medfac[table$medal=="Gold"] <- 3
table$medfac <- factor(table$medfac,
levels = c(1,2,3),
labels = c("Bronze","Silber","Gold"))
# Order table
table <- table[order(-table$Total,table$country,-table$medfac),]
# Graph
#######
tooltip_css <- "background-color:gray;color:white;padding:10px;border-radius:5px;font-family: Lora, sans-serif;font-weight:lighter;font-size:12px;"
# Plot
p <- ggplot(table[1:(3*84),], aes(x=reorder(c_abbrev,Total),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.05,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Total,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#d95f0e","#a6cee3","#fff7bc"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE)))
getwd()
saveRDS(table,file = "www/backup.rds")
backuptable <- readRDS("www/backup.rds")
library(shiny); runApp('commasoft_app.R')
install.packages("dashboardthemes")
library(dashboardthemes)
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
page <- read_html(url)
url <- "https://en.wikipedia.org/wiki/2016_Summer_Olympics#Number_of_athletes_by_National_Olympic_Committee"
xpath <- "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]"
# Fetching page
page <- read_html(url)
alltables <- html_nodes(page, "table")
View(alltables)
table <- alltables[[6]] %>%
html_table(fill = T)
View(table)
table <- alltables[[4]] %>%
html_table(fill = T)
View(table)
table <- alltables[[5]] %>%
html_table(fill = T)
View(table)
View(table)
table <- alltables[[8]] %>%
html_table(fill = T)
View(table)
table <- alltables[[9]] %>%
html_table(fill = T)
View(table)
table <- alltables[[10]] %>%
html_table(fill = T)
View(table)
View(table)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]") %>%
html_table()
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]",
css = "table.wikitable:nth-child(101)") %>%
html_table()
athletes <- url %>%
read_html() %>%
html_nodes(xpath = NULL, #"/html/body/div[3]/div[3]/div[5]/div[1]/table[6]",
css = "table.wikitable:nth-child(101)") %>%
html_table()
athletes <- url %>%
read_html() %>%
html_nodes(#xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]",
css = "table.wikitable:nth-child(101)") %>%
html_table()
athletes <- url %>%
read_html() %>%
html_nodes(#xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]",
css = "html.client-js.ve-available body.mediawiki.ltr.sitedir-ltr.mw-hide-empty-elt.ns-0.ns-subject.mw-editable.page-2016_Summer_Olympics.rootpage-2016_Summer_Olympics.skin-vector.action-view.skin-vector-legacy div#content.mw-body div#bodyContent.mw-body-content div#mw-content-text.mw-content-ltr div.mw-parser-output table.wikitable.collapsible.collapsed.sortable.mw-collapsible.mw-made-collapsible.jquery-tablesorter") %>%
html_table()
View(table)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[4]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table()
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[4]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(#xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[6]",
css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
View(athletes)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[7]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[8]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[1]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[2]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[3]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
View(athletes)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[4]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[5]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
View(athletes)
View(athletes)
athletes <- athletes[[1]]
View(athletes)
athletes
athletes <- as.data.frame(athletes[[1]])
View(athletes)
page <- read_html(url)
page <- read_html(url)
# Extracting table
rawtables <- html_nodes(xpath = xpath)
rawtables <- html_nodes(page, xpath = xpath)
View(rawtables)
table <- rawtable[[1]] %>%
html_table(fill = T)
rawtable <- html_nodes(page, xpath = xpath)
table <- rawtable[[1]] %>%
html_table(fill = T)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[5]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
rm(page,rawtable,rawtables)
rm(table)
rm(alltables)
View(athletes)
ath <- data_frame(athletes)
View(ath)
View(ath[[1]][[1]])
rm(ath)
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[5]",
#css = "table.wikitable:nth-child(101)"
) %>%
html_table(fill=T)
View(athletes)
ath <- strsplit(athletes[[1]], "\n")
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[5]",
#css = "table.wikitable:nth-child(101)"
) %>%
#html_table(fill=T)
html_text()
athletes
ath <- strsplit(athletes, "\n")
View(ath)
ath <- strsplit(athletes, "\n")[[1]]
ath
