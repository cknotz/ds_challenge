scale_fill_manual(values = c("#c2224a50","#c2224a95","#c2224a"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 6-0.0225*input$n_medals ),
axis.text.x = element_text(size = 8),
axis.ticks.y = element_line(size = 0.1),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE,position = "topleft"),
opts_zoom(max = 5)))
})
##### Graph 1.3
###############
output$scatter <- renderGirafe({
p <- table %>%
select(country_de,no,Gesamt,onclick_de,c_abbrev,Bronze,Silber,Gold) %>%
filter(!is.na(Gesamt)) %>%
unique() %>%
ggplot(aes(x=no,y=!!sym(input$medal_select))) +
stat_smooth(color = "gray",alpha = .2,linetype = "dashed",size = .5) +
geom_point_interactive(color = "#c2224a", alpha = .6,size = 3,
aes(data_id = country_de,
onclick = onclick_de,
tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n",
names(table)[names(table) == input$medal_select],": ",!!sym(input$medal_select),"\n\n",
"Für weitere Informationen bitte auf den Punkt klicken."))) +
ylab(names(table)[names(table) == input$medal_select]) +
xlab("Anzahl Athleten") +
labs(caption = "Regression via LOESS smoother") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(size = 8),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE,position = "topleft"),
opts_hover_inv(css = "opacity:0.1;"),
opts_hover(css = "fill:red;"),
opts_selection(type = "none")))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
table <- readRDS("www/backup.rds")
names(table)[names(table)=="Total"] <- "Gesamt"
ui <- dashboardPage(
dashboardHeader(title = "Data Science Herausforderung", titleWidth = 300),
dashboardSidebar(
sidebarMenu(
menuItem("Start", tabName = "start"),
menuItem("Meine Lösung", tabName = "solu",
menuSubItem("Aufgabe 1", tabName = "aufg1"), #, icon = icon("chart-bar", lib = "font-awesome")
menuSubItem("Aufgabe 2", tabName = "aufg2"), #, icon = icon("amazon", lib = "font-awesome")
menuSubItem("Aufgabe 3", tabName = "aufg3", selected = T)) #, icon = icon("cogs", lib = "font-awesome")
)),
dashboardBody(
shinyDashboardThemes(theme = "flat_red"),
tags$style(type="text/css", "text {font-family: sans-serif}"),
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: #c2224a;border-color: #c2224a;}")),
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: #c2224a;border-color: #c2224a;}")),
tabItems(
tabItem(tabName = "start",
fluidRow(
box(width = 12, collapsible = F,solidHeader = T,
HTML("<p><strong>Herausforderungen stelle ich mich immer gerne.</strong></p>
<p>Zu meiner Lösung:
<ul>
<li>Die Daten zur Zahl der Athleten und der gewonnenen Medaillen bei den Olympischen
Sommerspielen 2016 werden durch das Dashboard selbst von Wikipedia 'gescraped'
(<a target='_blank'
href='https://en.wikipedia.org/wiki/2016_Summer_Olympics#Number_of_athletes_by_National_Olympic_Committee'>
Quelle für die Zahl der Athleten</a>;
<a target='_blank'
href='https://en.wikipedia.org/wiki/2016_Summer_Olympics_medal_table#Medal_table'>
Quelle für die Zahl der Medaillen</a>)</li>
<li>Bei den Antworten auf Frage 3 beziehe ich mich u.a. auf den Artikel zur Anwendung von Machine-Learning Algorithmen
im Bereich Predictive Maintenance von Carvalho et al. (<a target='_blank'
href='https://doi.org/10.1016/j.cie.2019.106024'>2019</a>).
</li>
</ul></p>")
)
)),
tabItem(tabName = "aufg1",
fluidRow(
tabBox(width = 12, id = "tab1", # title = "Athleten & Medaillen bei den Olympischen Sommerspielen 2016"
tabPanel("Athleten pro Land",
fluidRow(width=NULL,align="center",
sliderInput("n_athletes",
label = "Anzahl Länder",
min = 2,
max = 207,
value = 10,
step = 1,
ticks = F)),
girafeOutput("athletes")),
tabPanel("Medaillen pro Land",
fluidRow(width=NULL,align="center",
sliderInput("n_medals",
label = "Anzahl Länder",
min = 2,
max = 84,
value = 10,
step = 1,
ticks = F)),
girafeOutput("medals")),
tabPanel("Bringen mehr Athleten mehr Medaillen?",
fluidRow(width=NULL,align="center",
pickerInput("medal_select",
label = "Resultat",
choices = c("Gesamtzahl Medaillen" = "Gesamt",
"Goldmedaillen" = "Gold",
"Silbermedaillen" = "Silber",
"Bronzemedaillen" = "Bronze"))),
girafeOutput("scatter"))
)
)),
tabItem(tabName = "aufg2",
fluidRow(
box(width = 12, collapsible = F, solidHeader = T,
title = "Amazon-Kundenbewertungen")
)),
tabItem(tabName = "aufg3",
fluidRow(
box(width = 12,collapsible = F,solidHeader = T,
title = "Frage 1: Was ist das primäre Ziel für den Einsatz von Predictive Maintenance?",
HTML("<p>Aller Wahrscheinlichkeit nach ist das Ziel, Wartungszeiten zu verkürzen
(bzw. zu vermeiden, wo diese nicht nötig sind) und daher vorhandenes Equipment optimaler zu nutzen. Andere
Motive sind allerdings auch denkbar (bspw. Unfallschutz oder Qualitätssicherung). Je nach Ziel ändert sich ggf.
auch, welche Gütemaße bei der Bewertungen von Algorithmen angewandt werden müssen. Sollen Wartungen optimiert werden,
spielt die Präzision (die Vermeidung falscher positiver Diagnosen) eine zentrale Rolle; bei der Qualitätssicherung
ist die Vermeidung von falscher negativer Diagnosen (die Sensitivität) wichtiger.</p>")),
box(width = 12,collapsible = F, solidHeader = T,
title = "Frage 2: Wie werden die Maschinen momentan inspiziert?",
HTML("<p>Laut einer Umfrage von PWC verlassen sich viele Betrieben auf visuelle Inspektionen ihrer
Maschinen; relativ wendige wenden schon Instrumentendaten, ggf. auch in real-time, an. In ersterem
Fall müssten zunächst Messinstrumente installiert und systematisch Daten gesammelt werden.</p>")),
box(width = 12,collapsible = F,solidHeader = T,
title = "Frage 3: ")
))
))
)
server <- function(input, output, session) {
tooltip_css <- "background-color:gray;color:white;padding:10px;border-radius:5px;font-family: Lora, sans-serif;font-weight:lighter;font-size:12px;"
##### Graph 1.1
###############
output$athletes <- renderGirafe({
print(6-0.020*input$n_athletes)
p <- table %>%
group_by(country) %>%
slice(1) %>%
ungroup %>%
arrange(-no) %>%
slice_head(n=input$n_athletes) %>%
ggplot(aes(x=reorder(c_abbrev,no),y=no)) +
geom_bar_interactive(stat = "identity", fill = "#c2224a",
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
ylab("Athleten") +
xlab("") +
coord_flip() +
scale_y_continuous(expand = c(0, 0), limits = c(0,610)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 6-0.0225*input$n_athletes ), # adapt this
axis.text.x = element_text(size = 8),
axis.ticks.y = element_line(size = 0.1),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE,position = "topleft"),
opts_zoom(max = 5)))
})
##### Graph 1.2
###############
output$medals <- renderGirafe({
p <- table %>% arrange(-table$Gesamt,table$c_abbrev) %>%
slice_head(n=3*input$n_medals) %>%
ggplot(aes(x=reorder(c_abbrev,Gesamt),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.1,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Gesamt,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 130)) +
scale_fill_manual(values = c("#c2224a50","#c2224a95","#c2224a"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 6-0.0225*input$n_medals ),
axis.text.x = element_text(size = 8),
axis.ticks.y = element_line(size = 0.1),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE,position = "topleft"),
opts_zoom(max = 5)))
})
##### Graph 1.3
###############
output$scatter <- renderGirafe({
p <- table %>%
select(country_de,no,Gesamt,onclick_de,c_abbrev,Bronze,Silber,Gold) %>%
filter(!is.na(Gesamt)) %>%
unique() %>%
ggplot(aes(x=no,y=!!sym(input$medal_select))) +
stat_smooth(color = "gray",alpha = .2,linetype = "dashed",size = .5) +
geom_point_interactive(color = "#c2224a", alpha = .6,size = 3,
aes(data_id = country_de,
onclick = onclick_de,
tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n",
names(table)[names(table) == input$medal_select],": ",!!sym(input$medal_select),"\n\n",
"Für weitere Informationen bitte auf den Punkt klicken."))) +
ylab(names(table)[names(table) == input$medal_select]) +
xlab("Anzahl Athleten") +
#labs(caption = "Regression via LOESS smoother") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(size = 8),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE,position = "topleft"),
opts_hover_inv(css = "opacity:0.1;"),
opts_hover(css = "fill:red;"),
opts_selection(type = "none")))
})
}
# Run the application
shinyApp(ui, server)
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
table <- readRDS("www/backup.rds")
names(table)[names(table)=="Total"] <- "Gesamt"
View(table)
slice(table,c(1,10))
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
ub <- pos+(sqrt(90*10)/sqrt(n))*1.96
n = 100
pos = 90
neg = 10
ub <- pos+(sqrt(90*10)/sqrt(n))*1.96
lb <- pos-(sqrt(90*10)/sqrt(n))*1.96
install.packages("EnvStats")
library(EnvStats)
rm(list=ls())
twoSamplePermutationTestProportion(x=c(90,10),y=c(2,0),
fcn = "mean",
alternative = "greater",
paired = F)
twoSamplePermutationTestProportion(x=c(90,10),y=c(2,0),
alternative = "greater")
x <- rbinom(100,100,.9)
x <- rbinom(100,1,.9)
mean(x)
sample(0:1, size=100, replace=TRUE)
?sample
sample(0:1, size=100, replace=TRUE,prob = .9)
sample(c(0,1), size=100, replace=TRUE,prob = .9)
sample(c(0,1), size=100, replace=TRUE,prob = c(.1,.9))
<- sample(c(0,1), size=100, replace=TRUE,prob = c(.1,.9))
x <- sample(c(0,1), size=100, replace=TRUE,prob = c(.1,.9))
mean(x)
x <- sample(c(0,1), size=100, replace=TRUE,prob = c(.1,.9))
x
mean(x)
length(x)
x <- sample(c(0,1), size=100,prob = c(.1,.9))
?seq
a <- rep_len(1,90)
b <- rep_len(0,10)
x <- c(rep_len(1,90),rep_len(0,10))
mean(x)
rm(a,b)
x <- sample(c(rep_len(1,90),rep_len(0,10)))
x
mean(x)
y <- c(1,1) # Anbieter B (2 positiv)
set.seed(42)
x <- sample(c(rep_len(1,90),rep_len(0,10))) # Anbieter A (100 zufällige Bewertungen, 90% positiv=1)
y <- c(1,1) # Anbieter B (2 positiv)
mean(x)
twoSamplePermutationTestProportion(x,y,
alternative = "greater")
library(EnvStats)
twoSamplePermutationTestProportion(x,y,
alternative = "greater")
test <- twoSamplePermutationTestProportion(x,y,
alternative = "greater")
test
View(test)
?permutationTest.object
test <- twoSamplePermutationTestProportion(x,y,
alternative = "greater",
tol=sqrt(.Machine$double.eps))
set.seed(42)
dat1 <- sample(c(rep_len(1,90),rep_len(0,10))) # Anbieter A (100 zufällige Bewertungen, 90% positiv=1)
dat2 <- c(1,1) # Anbieter B (2 positiv)
rm(x,y)
test <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "greater",
tol=sqrt(.Machine$double.eps))
rm(test)
test.list <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "greater",
tol=sqrt(.Machine$double.eps))
test.list
plot(test.list)
test.list <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "less",
tol=sqrt(.Machine$double.eps))
test.list
test.list <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "two.sided",
tol=sqrt(.Machine$double.eps))
test.list
?prop.test
set.seed(23)
dat1 <- rbinom(10, size = 1, prob = 0.3)
dat2 <- rbinom(20, size = 1, prob = 0.5)
test.list <- twoSamplePermutationTestProportion(dat1, dat2, alternative = "less")
test.list
set.seed(42)
dat1 <- sample(c(rep_len(1,90),rep_len(0,10))) # Anbieter A (100 zufällige Bewertungen, 90% positiv=1)
dat2 <- c(1,1) # Anbieter B (2 positiv)
test.list <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "greater",
tol=sqrt(.Machine$double.eps))
test.list
prop.test(x = c(90,2),n = c(100,2))
?prop.test
prop.test(x = c(90,2),n = c(100,2),
alternative = "greater",
correct = T)
prop <- prop.test(x = c(90,2),n = c(100,2),
alternative = "greater",
correct = T)
prop
rm(test.list)
prop$statistic
prop$p.value
prop$estimate
set.seed(42)
dat1 <- sample(c(rep_len(1,90),rep_len(0,10))) # Anbieter A (100 zufällige Bewertungen, 90% positiv=1)
dat2 <- c(1,1) # Anbieter B (2 positiv)
perm <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "greater")
perm
install.packages("statsr")
discr = read.csv("http://stat.duke.edu/courses/Spring12/sta101.1/lec/discr.csv", h = T)
install.packages("mosaic")
Sleep <- read.csv("http://www.mosaic-web.org/go/datasets/SleepCaffeine.csv")
View(Sleep)
rm(Sleep)
library(statsr)
inference(dat1,dat2,
est="proportion",
type = "ht",
null = 0,
alternative = "greater",
method = "simulation",
seed = 42,
nsim = 100)
anbA <- rbinom(n=1000,size=100,prob = 90/100)
anbB <- rbinom(n=1000,size = 2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.1)
anbA <- rbinom(n=10000,size=100,prob = 90/100)
anbB <- rbinom(n=10000,size = 2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.1)
anbA <- rbinom(n=100000,size=100,prob = 90/100)
anbB <- rbinom(n=100000,size = 2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.1)
anbA <- rbinom(n=10000000000,size=100,prob = 90/100)
anbB <- rbinom(n=10000000000,size = 2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.1)
anbA <- rbinom(n=1000000,size=100,prob = 90/100)
anbB <- rbinom(n=1000000,size = 2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.1)
sum(diffs >=-.1)
p <- sum(diffs >=-.1)/1000000
p
sum(diffs >=-.1)/1000000
sum(diffs <=-.1)/1000000
males <- rbinom(n = 100000, size = 31, prob = 40/63)
females <- rbinom(n = 100000, size = 32, prob = 40/63)
differences <- males/31 - females/32
hist(differences)
prop <- prop.test(x = c(90,2),n = c(100,2),
alternative = "greater",
correct = T)
prop$estimate
prop$p.value
dat1 <- sample(c(rep_len(1,90),rep_len(0,10))) # Anbieter A (100 zufällige Bewertungen, 90% positiv=1)
dat2 <- c(1,1) # Anbieter B (2 positiv)
perm <- twoSamplePermutationTestProportion(dat1,dat2,
alternative = "greater")
perm
anbA <- rbinom(n=1000000,size=100,prob = 90/100)
anbB <- rbinom(n=1000000,size = 2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
rm(males,females,differences)
rm(p,perm,prop)
sum(diffs >=.1)/1000000
anbA <- rbinom(n=1000000,size=100,prob = 90/100)
anbB <- rbinom(n=1000000,size = 2,prob = 75/100)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.15)/1000000
anbA <- rbinom(n=1000000,size=100,prob = 90/100)
anbB <- rbinom(n=1000000,size =100,prob = 75/100)
diffs <- anbA/100 - anbB/2
hist(diffs)
sum(diffs >=.15)/1000000
sum(diffs >=15)/1000000
diffs <- anbA/100 - anbB/100
hist(diffs)
sum(diffs >=.15)/1000000
anbB <- rbinom(n=1000000,size =100,prob = 15/100)
diffs <- anbA/100 - anbB/100
hist(diffs)
sum(diffs >=.75)/1000000
anbB <- rbinom(n=1000000,size =100,prob = 5/100)
diffs <- anbA/100 - anbB/100
hist(diffs)
sum(diffs >=.75)/1000000
sum(diffs >=0)/1000000
anbA <- rbinom(n=1000000,size=100,prob = 90/100)
anbB <- rbinom(n=1000000,size =2,prob = 2/2)
diffs <- anbA/100 - anbB/2
hist(diffs)
