# Storing proportions
sum <- df %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1),
sample_size = n())
phat_A <- sum$positive[1]
phat_B <- sum$positive[2]
n_A <- sum$sample_size[1]
n_B <- sum$sample_size[2]
obs_diff <- phat_A - phat_B
# Shuffling
set.seed(17)
shuffles <- mosaic::do(1000) *
(df %>%
mutate(anb = mosaic::shuffle(anb)) %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1)))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_boxplot()
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter()
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25) +
geom_boxplot(outlier.shape=NA)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25, size = .1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25, size = .5)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.1, width = 0.25, size = 1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.25, width = 0.25, size = 1)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.25, width = 0.25, size = 1, height = 0)
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,fill = "#c2224a")
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,color = "#c2224a")
null_dist <- shuffles %>%
group_by(.index) %>%
summarize(diff = -diff(positive)) # negative of difference to obtain same sign as diff A-B
sum(round(null_dist$diff,2)>0)/1000
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,color = "#c2224a")
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.5, width = 0.25, size = 2, height = 0,color = "#c2224a") +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2, height = 0,color = "#c2224a") +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
scale_y_continuous(breaks = seq(0,1,.1))
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
scale_y_continuous(breaks = seq(0,1,.1)) +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1))
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "#c2224a", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
sum(round(null_dist$diff,2)>0)/1000
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}, expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-0.2,1,.1), ) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}, expand = c(0, 0), limits = c(0,1)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000}, expand = c(0, 0), limits = c(0,1000)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000},
expand = c(0, 0),
limits = c(0,1000),
breaks = seq(0,1000,200)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
library(shiny); runApp('commasoft_app.R')
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
sum(round(null_dist$diff,2)>0)/1000
df <- data.frame(anb = c(replicate(100, "Anbieter A"),replicate(2, "Anbieter B")),
eval = c(c(replicate(90,1),replicate(10,0)),c(1,1)))
table(df$anb,df$eval)
# Storing proportions
sum <- df %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1),
sample_size = n())
phat_A <- sum$positive[1]
phat_B <- sum$positive[2]
n_A <- sum$sample_size[1]
n_B <- sum$sample_size[2]
obs_diff <- phat_A - phat_B
# Shuffling
set.seed(17)
shuffles <- mosaic::do(1000) *
(df %>%
mutate(anb = mosaic::shuffle(anb)) %>%
group_by(anb) %>%
summarize(positive = mean(eval == 1)))
ggplot(shuffles, aes(x=anb,y=positive)) +
geom_jitter(alpha=.2, width = 0.25, size = 2,color = "#c2224a") +
scale_y_continuous(breaks = seq(0,1,.1)) +
ylab("Anteil positive Bewertungen") +
xlab("") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
null_dist <- shuffles %>%
group_by(.index) %>%
summarize(diff = -diff(positive)) # negative of difference to obtain same sign as diff A-B
ggplot(null_dist, aes(x = diff)) +
geom_histogram(color = "white", fill = "#c2224a") +
scale_y_continuous(labels = function(x){x/1000},
expand = c(0, 0),
limits = c(0,1000),
breaks = seq(0,1000,200)) +
scale_x_continuous(breaks = seq(-0.2,1,.1)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank())
sum(round(null_dist$diff,2)>0)/1000
sum(round(null_dist$diff,2)<=0)/1000
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
fisher <- fisher.test(rbind(c(90,2),c(10,0)), alternative="less")
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny); runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
rbind(c(90,2),c(10,0))
runApp('commasoft_app.R')
fisher.test(rbind(c(90,10),c(2,0)), alternative="less")
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
fisher.test(rbind(c(90,10),c(2,0)), alternative="greater")
fisher.test(rbind(c(90,10),c(2,0)), alternative="two.sided")
runApp('commasoft_app.R')
two <- (factorial(91+9)*factorial(1+1)*factorial(91+1)*factorial(9+1)) /
(factorial(102)*factorial(89)*factorial(1)*factorial(11)*factorial(1)) # one more extreme
two
three <- (factorial(92+8)*factorial(0+2)*factorial(92+0)*factorial(8+2)) /
(factorial(102)*factorial(88)*factorial(0)*factorial(12)*factorial(2)) # one more extreme
three
one <- (factorial(90+10)*factorial(2+0)*factorial(90+2)*factorial(10+0)) /
(factorial(102)*factorial(90)*factorial(2)*factorial(10)*factorial(0)) # observed
two <- (factorial(91+9)*factorial(1+1)*factorial(91+1)*factorial(9+1)) /
(factorial(102)*factorial(91)*factorial(1)*factorial(9)*factorial(1)) # one more extreme
three <- (factorial(92+8)*factorial(0+2)*factorial(92+0)*factorial(8+2)) /
(factorial(102)*factorial(92)*factorial(0)*factorial(8)*factorial(2)) # one more extreme
one+two+three # one sided, also two-sided (R sums probs of all tables with probs <= to observed; here: all!)
one
two
three
runApp('commasoft_app.R')
runApp('commasoft_app.R')
runApp('commasoft_app.R')
?bayes.prop.test()
install.packages("BayesianFirstAid")
version()
R.version
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages("rjags")
devtools::install_github("rasmusab/bayesian_first_aid")
library(BayesianFirstAid)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/carloknotz/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/carloknotz/homebrew/opt/jags/lib'")
install.packages("rjags")
devtools::install_github("rasmusab/bayesian_first_aid")
library(shiny); runApp('commasoft_app.R')
library(ggplot2)
library(rvest)
library(dplyr)
library(tidyverse)
library(ggiraph)
library(countrycode)
library(BayesianFirstAid)
no_pos <- c(90,2)
no_eval <- c(100,2)
bayes.prop.test(no_pos,no_eval)
fit <- bayes.prop.test(no_pos,no_eval)
summary(fit)
plot(fit)
diagnostics(fit)
plot(fit)
library(shiny); runApp('commasoft_app.R')
plot(fit)
summary(fit)
bayes.prop.test(no_pos,no_eval)
fit$comp_theta
fit$mcmc_samples
fit$stats
model.code(fit)
samp_mat <- as.matrix(samples)
require(rjags)
# Setting up the data
x <- c(90, 2)
n <- c(100, 2)
# The model string written in the JAGS language
model_string <- "model {
for(i in 1:length(x)) {
x[i] ~ dbinom(theta[i], n[i])
theta[i] ~ dbeta(1, 1)
x_pred[i] ~ dbinom(theta[i], n[i])
}
}"
model <- jags.model(textConnection(model_string), data = list(x = x, n = n),
n.chains = 3, n.adapt=1000)
samples <- coda.samples(model, c("theta", "x_pred"), n.iter=5000)
#Inspecting the posterior
plot(samples)
summary(samples)
samp_mat <- as.matrix(samples)
quantile(samp_mat[, "theta[1]"] - samp_mat[, "theta[2]"], c(0.025, 0.5, 0.975))
hist(samp_mat)
View(samples)
?plot()
plot(fit, col = "red")
diff <- samp_mat[, "theta[1]"] - samp_mat[, "theta[2]"]
hist(diff)
