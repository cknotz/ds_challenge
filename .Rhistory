# Number of medals
##################
# Downloading website
url <- "https://en.wikipedia.org/wiki/2016_Summer_Olympics_medal_table"
xpath <- "/html/body/div[3]/div[3]/div[5]/div[1]/table[2]"
page <- read_html(url)
# Extracting table
alltables <- html_nodes(page, "table")
table <- alltables[[2]] %>%
html_table(fill = T)
# Cleaning
table <- table[which(grepl("Totals", table$NOC)!=TRUE),]
table <- table %>%
separate(NOC,
c("country","c_abbrev"),
sep = -6)
table$c_abbrev <- gsub("[()]|(^\\s+)|(\\s+$)", "",table$c_abbrev)
# Reading links
link <- page %>%
html_nodes(xpath = "//th/a") %>%
html_attr("href")
country <- gsub("/wiki/|_at_the_2016_Summer_Olympics", "", link)
country <- gsub("_", " ", country)
links <- data.frame(country,link)
links <- links[which(grepl("Summer Olympic|Winter Olympic|Independent Olympic Athletes",links$country)!=TRUE),]
links$link <- gsub("/wiki/", "",links$link)
# # Merge
table <- merge(table,links,
by = "country")
rm(alltables,page, url, xpath,country,links,link) # removing clutter
# adjust medal names
names(table)[names(table)=="Silver"] <- "Silber"
# Number of athletes
####################
url <- "https://en.wikipedia.org/wiki/2016_Summer_Olympics#Number_of_athletes_by_National_Olympic_Committee"
# Fetching page
athletes <- url %>%
read_html() %>%
html_nodes(xpath = "/html/body/div[3]/div[3]/div[5]/div[1]/table[5]",
#css = "table.wikitable:nth-child(101)"
) %>%
#html_table(fill=T)
html_text()
athletes <- strsplit(athletes, '\n')[[1]] %>%
as.data.frame() %>%
filter(.!="Participating National Olympic Committees" & .!= "") %>%
rename("entry"= ".")
# Cleaning
athletes$no <- as.numeric(str_extract(athletes$entry,
"(\\d+)"))
athletes$country <- gsub("\\d|[[:punct:]]",
"",
athletes$entry) %>%
trimws(whitespace = "[\\h\\v]")
athletes$entry <- NULL
rm(url) #remove clutter
# Merge & reshape
#################
table <- merge(athletes,table,
by="country",
all.x = T)
rm(athletes)
# Cleaning & translating country names
table <- filter(table,
country!="Refugee Olympic Team" & country!="Independent Olympic Athletes")
table$country_de <- countrycode(table$country,'country.name','country.name.de')
# custom name changes
table$country_de[which(table$country=="Virgin Islands")] <- "Virgin Islands"
table$country_de[which(table$country_de=="Korea, Demokratische Volksrepublik")] <- "Nordkorea"
table$country_de[which(table$country_de=="Korea, Republik von")] <- "Südkorea"
table$country_de[which(table$country_de=="Russische Föderation")] <- "Russland"
table$c_abbrev <- countrycode(table$country,'country.name','iso3c')
# custom names
table$c_abbrev[which(table$country=="Kosovo")] <- "XK"
table$c_abbrev[which(table$country=="Virgin Islands")] <- "VIR"
# Data for graph functions
table$link <- paste0("https://en.wikipedia.org/wiki/",table$link)
table$onclick <- sprintf("window.open(\"%s%s\")","",table$link)
# German links
table$link_de <- paste0("https://de.wikipedia.org/wiki/Olympische_Sommerspiele_2016/Teilnehmer_(",
table$country_de,
")") %>%
gsub(" ","_",.)
table$onclick_de <- sprintf("window.open(\"%s%s\")","",table$link_de)
# Reshape for graph
table <- pivot_longer(table,
cols = c("Gold","Silber","Bronze"),
names_to = "medal",
values_to = "count")
# Values for tooltip
tiptab <- pivot_wider(table[,c("country","medal","count")],
id_cols = c("country","medal"),
names_from = "medal",
values_from = "count")
# Merging
table <- merge(table,tiptab,by = "country")
rm(tiptab)
# Factor for graph
table$medfac <- NA
table$medfac[table$medal=="Bronze"] <- 1
table$medfac[table$medal=="Silber"] <- 2
table$medfac[table$medal=="Gold"] <- 3
table$medfac <- factor(table$medfac,
levels = c(1,2,3),
labels = c("Bronze","Silber","Gold"))
# Save as backup
saveRDS(table,file = "www/backup.rds")
write_csv(table, path = "www/backup.csv")
table <- read_csv("www/backup.csv")
table <- read.csv("www/backup.csv")
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
#table <- readRDS("www/backup.rds")
table <- read.csv("www/backup.csv")
names(table)[names(table)=="Total"] <- "Gesamt"
ui <- dashboardPage(
dashboardHeader(title = "Data Science Herausforderung", titleWidth = 300),
dashboardSidebar(
sidebarMenu(
menuItem("Start", tabName = "start"),
menuItem("Meine Lösung", tabName = "solu",
menuSubItem("Aufgabe 1", tabName = "aufg1", selected = T), #, icon = icon("chart-bar", lib = "font-awesome")
menuSubItem("Aufgabe 2", tabName = "aufg2"), #, icon = icon("amazon", lib = "font-awesome")
menuSubItem("Aufgabe 3", tabName = "aufg3")) #, icon = icon("cogs", lib = "font-awesome")
)),
dashboardBody(
shinyDashboardThemes(theme = "flat_red"),
tabItems(
tabItem(tabName = "start",
fluidRow(
box(width = 12, collapsible = F,solidHeader = T,
HTML("<p><strong>Herausforderungen stelle ich mich immer gerne.</strong></p>
<p>Zu meiner Lösung:
<ul>
<li>Die Daten zur Zahl der Athleten und der gewonnenen Medaillen bei den Olympischen
Sommerspielen 2016 werden durch das Dashboard selbst von Wikipedia 'gescraped'
(<a target='_blank'
href='https://en.wikipedia.org/wiki/2016_Summer_Olympics#Number_of_athletes_by_National_Olympic_Committee'>
Quelle für die Zahl der Athleten</a>;
<a target='_blank'
href='https://en.wikipedia.org/wiki/2016_Summer_Olympics_medal_table#Medal_table'>
Quelle für die Zahl der Medaillen</a>)</li>
<li>Bei den Antworten auf Frage 3 beziehe ich mich u.a. auf den Artikel zur Anwendung von Machine-Learning Algorithmen
im Bereich Predictive Maintenance von Carvalho et al. (<a target='_blank'
href='https://doi.org/10.1016/j.cie.2019.106024'>2019</a>).
</li>
</ul></p>")
)
)),
tabItem(tabName = "aufg1",
fluidRow(
tabBox(width = 12, id = "tab1", # title = "Athleten & Medaillen bei den Olympischen Sommerspielen 2016"
tabPanel("Athleten pro Land",
fluidRow(width=NULL,align="center",
sliderInput("n_athletes",
label = "Anzahl Länder",
min = 2,
max = 207,
value = 10,
step = 1)),
girafeOutput("athletes")),
tabPanel("Medaillen pro Land",
fluidRow(width=NULL,align="center",
sliderInput("n_medals",
label = "Anzahl Länder",
min = 2,
max = 84,
value = 10,
step = 1)),
girafeOutput("medals")),
tabPanel("Bringen mehr Athleten mehr Medaillen?",
fluidRow(width=NULL,align="center",
pickerInput("medal_select",
label = "Resultat",
choices = c("Gesamtzahl Medaillen" = "Gesamt",
"Goldmedaillen" = "Gold",
"Silbermedaillen" = "Silber",
"Bronzemedaillen" = "Bronze"))),
girafeOutput("scatter"))
)
)),
tabItem(tabName = "aufg2",
fluidRow(
box(width = 12, collapsible = F, solidHeader = T,
title = "Amazon-Kundenbewertungen")
)),
tabItem(tabName = "aufg3",
fluidRow(
box(width = 12,collapsible = T, solidHeader = T,collapsed = T,
title = "Frage 1: "),
box(width = 12,collapsible = T,solidHeader = T,collapsed = T,
title = "Frage 2: "),
box(width = 12,collapsible = T,solidHeader = T,collapsed = T,
title = "Frage 3: ")
))
))
)
server <- function(input, output, session) {
tooltip_css <- "background-color:gray;color:white;padding:10px;border-radius:5px;font-family: Lora, sans-serif;font-weight:lighter;font-size:12px;"
##### Graph 1.1
###############
output$athletes <- renderGirafe({
p <- table %>% arrange(-no) %>%
slice_head(n=3*input$n_athletes) %>%
ggplot(aes(x=reorder(c_abbrev,no),y=no)) +
geom_bar_interactive(stat = "identity", fill = "#e34a33",
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
ylab("Athleten") +
xlab("") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 3), # adapt this
axis.text.x = element_text(size = 9),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE),
opts_zoom(max = 5)))
})
##### Graph 1.2
###############
output$medals <- renderGirafe({
p <- table %>% arrange(-table$Gesamt,table$c_abbrev) %>%
slice_head(n=3*input$n_medals) %>%
ggplot(aes(x=reorder(c_abbrev,Gesamt),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.1,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Gesamt,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#fee8c8","#fdbb84","#e34a33"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
#axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE),
opts_zoom(max = 5)))
})
##### Graph 1.3
###############
output$scatter <- renderGirafe({
p <- table %>%
select(country_de,no,Gesamt,onclick_de,c_abbrev,Bronze,Silber,Gold) %>%
filter(!is.na(Gesamt)) %>%
unique() %>%
ggplot(aes(x=no,y=!!sym(input$medal_select))) +
stat_smooth(color = "gray",alpha = .2,linetype = "dashed",size = .5) +
geom_point_interactive(color = "#e34a33", alpha = .6,size = 3,
aes(data_id = country_de,
onclick = onclick_de,
tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n",
names(table)[names(table) == input$medal_select],": ",!!sym(input$medal_select),"\n\n",
"Für weitere Informationen bitte auf den Punkt klicken."))) +
ylab(names(table)[names(table) == input$medal_select]) +
xlab("Anzahl Athleten") +
labs(caption = "Regression via LOESS smoother") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE),
opts_hover_inv(css = "opacity:0.1;"),
opts_hover(css = "fill:red;"),
opts_selection(type = "none")))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('commasoft_app.R')
library(shiny)
library(shinydashboard)
library(dashboardthemes)
library(shinyWidgets)
library(ggplot2)
library(tidyverse)
library(ggiraph)
table <- readRDS("www/backup.rds")
names(table)[names(table)=="Total"] <- "Gesamt"
ui <- dashboardPage(
dashboardHeader(title = "Data Science Herausforderung", titleWidth = 300),
dashboardSidebar(
sidebarMenu(
menuItem("Start", tabName = "start"),
menuItem("Meine Lösung", tabName = "solu",
menuSubItem("Aufgabe 1", tabName = "aufg1", selected = T), #, icon = icon("chart-bar", lib = "font-awesome")
menuSubItem("Aufgabe 2", tabName = "aufg2"), #, icon = icon("amazon", lib = "font-awesome")
menuSubItem("Aufgabe 3", tabName = "aufg3")) #, icon = icon("cogs", lib = "font-awesome")
)),
dashboardBody(
shinyDashboardThemes(theme = "flat_red"),
tabItems(
tabItem(tabName = "start",
fluidRow(
box(width = 12, collapsible = F,solidHeader = T,
HTML("<p><strong>Herausforderungen stelle ich mich immer gerne.</strong></p>
<p>Zu meiner Lösung:
<ul>
<li>Die Daten zur Zahl der Athleten und der gewonnenen Medaillen bei den Olympischen
Sommerspielen 2016 werden durch das Dashboard selbst von Wikipedia 'gescraped'
(<a target='_blank'
href='https://en.wikipedia.org/wiki/2016_Summer_Olympics#Number_of_athletes_by_National_Olympic_Committee'>
Quelle für die Zahl der Athleten</a>;
<a target='_blank'
href='https://en.wikipedia.org/wiki/2016_Summer_Olympics_medal_table#Medal_table'>
Quelle für die Zahl der Medaillen</a>)</li>
<li>Bei den Antworten auf Frage 3 beziehe ich mich u.a. auf den Artikel zur Anwendung von Machine-Learning Algorithmen
im Bereich Predictive Maintenance von Carvalho et al. (<a target='_blank'
href='https://doi.org/10.1016/j.cie.2019.106024'>2019</a>).
</li>
</ul></p>")
)
)),
tabItem(tabName = "aufg1",
fluidRow(
tabBox(width = 12, id = "tab1", # title = "Athleten & Medaillen bei den Olympischen Sommerspielen 2016"
tabPanel("Athleten pro Land",
fluidRow(width=NULL,align="center",
sliderInput("n_athletes",
label = "Anzahl Länder",
min = 2,
max = 207,
value = 10,
step = 1)),
girafeOutput("athletes")),
tabPanel("Medaillen pro Land",
fluidRow(width=NULL,align="center",
sliderInput("n_medals",
label = "Anzahl Länder",
min = 2,
max = 84,
value = 10,
step = 1)),
girafeOutput("medals")),
tabPanel("Bringen mehr Athleten mehr Medaillen?",
fluidRow(width=NULL,align="center",
pickerInput("medal_select",
label = "Resultat",
choices = c("Gesamtzahl Medaillen" = "Gesamt",
"Goldmedaillen" = "Gold",
"Silbermedaillen" = "Silber",
"Bronzemedaillen" = "Bronze"))),
girafeOutput("scatter"))
)
)),
tabItem(tabName = "aufg2",
fluidRow(
box(width = 12, collapsible = F, solidHeader = T,
title = "Amazon-Kundenbewertungen")
)),
tabItem(tabName = "aufg3",
fluidRow(
box(width = 12,collapsible = T, solidHeader = T,collapsed = T,
title = "Frage 1: "),
box(width = 12,collapsible = T,solidHeader = T,collapsed = T,
title = "Frage 2: "),
box(width = 12,collapsible = T,solidHeader = T,collapsed = T,
title = "Frage 3: ")
))
))
)
server <- function(input, output, session) {
tooltip_css <- "background-color:gray;color:white;padding:10px;border-radius:5px;font-family: Lora, sans-serif;font-weight:lighter;font-size:12px;"
##### Graph 1.1
###############
output$athletes <- renderGirafe({
p <- table %>% arrange(-no) %>%
slice_head(n=3*input$n_athletes) %>%
ggplot(aes(x=reorder(c_abbrev,no),y=no)) +
geom_bar_interactive(stat = "identity", fill = "#e34a33",
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
ylab("Athleten") +
xlab("") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 3), # adapt this
axis.text.x = element_text(size = 9),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE),
opts_zoom(max = 5)))
})
##### Graph 1.2
###############
output$medals <- renderGirafe({
p <- table %>% arrange(-table$Gesamt,table$c_abbrev) %>%
slice_head(n=3*input$n_medals) %>%
ggplot(aes(x=reorder(c_abbrev,Gesamt),
y=count, fill = medfac)) +
geom_bar_interactive(position="stack", stat="identity",color = "gray", size=.1,
aes(tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Gesamtzahl Medaillen: ",Gesamt,"\n",
"Gold: ",Gold,"\n",
"Silber: ",Silber,"\n",
"Bronze: ",Bronze,"\n\n",
"Für weitere Informationen bitte auf den Balken klicken."),
onclick = onclick_de)) +
coord_flip() +
xlab("") +
ylab("") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 125)) +
scale_fill_manual(values = c("#fee8c8","#fdbb84","#e34a33"),
guide = guide_legend(reverse = TRUE)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
#axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE),
opts_zoom(max = 5)))
})
##### Graph 1.3
###############
output$scatter <- renderGirafe({
p <- table %>%
select(country_de,no,Gesamt,onclick_de,c_abbrev,Bronze,Silber,Gold) %>%
filter(!is.na(Gesamt)) %>%
unique() %>%
ggplot(aes(x=no,y=!!sym(input$medal_select))) +
stat_smooth(color = "gray",alpha = .2,linetype = "dashed",size = .5) +
geom_point_interactive(color = "#e34a33", alpha = .6,size = 3,
aes(data_id = country_de,
onclick = onclick_de,
tooltip = paste0("<strong>",country_de,"</strong>\n\n",
"Anzahl Athleten: ",no,"\n",
names(table)[names(table) == input$medal_select],": ",!!sym(input$medal_select),"\n\n",
"Für weitere Informationen bitte auf den Punkt klicken."))) +
ylab(names(table)[names(table) == input$medal_select]) +
xlab("Anzahl Athleten") +
labs(caption = "Regression via LOESS smoother") +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
panel.grid.major.x = element_line(color = "gray", size = .2),
panel.grid.major.y = element_blank(),
legend.key.size = unit(.75,"line"),
legend.text = element_text(size = 6))
girafe(ggobj = p,
fonts=list(sans = "Arial"),
options = list(
opts_tooltip(offx = 10, offy = 10,css = tooltip_css,use_cursor_pos = TRUE),
opts_toolbar(saveaspng = FALSE),
opts_hover_inv(css = "opacity:0.1;"),
opts_hover(css = "fill:red;"),
opts_selection(type = "none")))
})
}
# Run the application
shinyApp(ui = ui, server = server)
